const axios = require("axios");
const fs = require("fs");
const supabaseClient = require('./supabase');

async function gerarTeste(msg, app) {
  try {
    console.log(`Tentando gerar teste para ${msg.from} com app ${app}...`);
    
    const userId = msg.from;
    
    // Verificar se o usu√°rio j√° fez teste antes
    const verificacao = await supabaseClient.podeRealizarTeste(userId);
    
    if (!verificacao.permitido) {
      // Usu√°rio n√£o pode fazer teste agora
      const dataFormatada = new Date(verificacao.dataDesbloqueio).toLocaleDateString('pt-BR');
      await msg.reply(
        `‚ö†Ô∏è Voc√™ j√° utilizou seu teste gratuito recentemente.\n\n` +
        `Ser√° poss√≠vel fazer um novo teste em ${verificacao.diasRestantes} dias (${dataFormatada}).\n\n` +
        `Caso queira contratar agora sem precisar esperar, digite /planos para ver nossas op√ß√µes.`
      );
      return;
    }
    
    // Definir o tipo de dispositivo com base no app
    let dispositivo = "Desconhecido";
    if (app === "iptvstream") dispositivo = "Android/TV Box";
    else if (app === "smarters") dispositivo = "iPhone/iPad";
    else if (app === "xcloud") dispositivo = "Smart TV";
    
    // Se chegou aqui, pode gerar o teste
    console.log(`Enviando requisi√ß√£o para API de testes...`);
    
    const postData = {
      appName: "com.whatsapp",
      messageDateTime: new Date().toISOString(),
      devicePhone: "",
      deviceName: "",
      senderName: msg._data?.notifyName || "Nome Desconhecido",
      senderMessage: msg.body,
      userAgent: "BotBot.Chat",
    };

    const response = await axios.post(
      "https://goldplay.sigma.st/api/chatbot/mVLl9vYDQw/rlKWO3Wzo7",
      postData
    );

    console.log(`Resposta da API recebida: ${JSON.stringify(response.data)}`);

    if (response.data) {
      const tempFilePath = "./temp_response.json";

      // Salva os dados retornados no arquivo JSON
      fs.writeFileSync(
        tempFilePath,
        JSON.stringify(response.data, null, 2),
        "utf8"
      );

      const { username, password } = response.data;

      if (username && password) {
        console.log(`Enviando credenciais para o usu√°rio: ${username}`);
        
        // Registrar o teste no banco de dados
        await supabaseClient.registrarTesteUsuario(userId, app, dispositivo);
        
        // Envia os dados com a ordem baseada no valor de `app`
        if (app === "xcloud") {
          await msg.reply(
            `‚úÖ Preencha os 3 campos na ordem abaixo:\n\n` +
              `üõú *Provedor:* goldplaybr\n` +
              `üë§ *Usu√°rio:* ${username}\n` +
              `üîë *Senha:* ${password}\n\n` +
              'Seu teste tem dura√ß√£o de 3h, fique a vontade para testar e conhecer nossos conte√∫dos üòâ'
          );
        } else if (app === "iptvstream") {
          await msg.reply(
            `‚úÖ Preencha os 3 campos na ordem abaixo:\n\n` +
              `üë§ *Usu√°rio:* ${username}\n` +
              `üîë *Senha:* ${password}\n` +
              `üõú *Servidor:* http://gbbrtk.online\n\n` +
              'Seu teste tem dura√ß√£o de 3h, fique a vontade para testar e conhecer nossos conte√∫dos üòâ'
          );
        } else if (app === "smarters") {
          await msg.reply(
            `‚úÖ Preencha os 4 campos na ordem abaixo:\n\n` +
              `üë§ *Nome:* gold\n` +
              `üë§ *Usu√°rio:* ${username}\n` +
              `üîë *Senha:* ${password}\n` +
              `üõú *Servidor:* http://gpthzhx.top\n\n` +
              'Seu teste tem dura√ß√£o de 3h, fique a vontade para testar e conhecer nossos conte√∫dos üòâ'
          );
        } else {
          await msg.reply(
            `‚úÖ Preencha os seus dados de acesso\n\n` +
              `üîë *Username:* ${username}\n` +
              `üîí *Password:* ${password}\n\n` +
              'Seu teste tem dura√ß√£o de 3h, fique a vontade para testar e conhecer nossos conte√∫dos üòâ'
          );
        }
        
        // Ap√≥s o teste, adicionar um lembrete sobre o tempo de bloqueio
        setTimeout(async () => {
          await msg.reply(
            '‚ö†Ô∏è *Lembrete importante:* Ap√≥s este teste gratuito, voc√™ s√≥ poder√° solicitar outro ap√≥s 30 dias. ' +
            'Se gostar do servi√ßo, recomendamos contratar um plano para acesso cont√≠nuo. Digite /planos para conhecer nossas op√ß√µes.'
          );
        }, 15000); // 15 segundos ap√≥s o envio das credenciais
        
      } else {
        console.error("API n√£o retornou credenciais");
        await msg.reply(
          "‚ö†Ô∏è N√£o foi poss√≠vel gerar teste. Por favor, aguarde alguns instantes e tente novamente."
        );
      }
      
      // Limpar arquivo tempor√°rio
      if (fs.existsSync(tempFilePath)) {
        fs.unlinkSync(tempFilePath);
      }
    } else {
      console.error("API n√£o retornou dados");
      await msg.reply("‚ö†Ô∏è A API n√£o retornou dados. Por favor, tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao fazer a requisi√ß√£o para a API:", error);
    await msg.reply("‚ö†Ô∏è Ocorreu um erro ao tentar obter as informa√ß√µes. Por favor, tente novamente em alguns instantes.");
  }
}

module.exports = gerarTeste;